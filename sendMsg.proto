syntax = "proto3";
package wsPool;
/*
message SendMsg {
  int32 cmd =1;
  int64 timestamp  = 2;
  string fromClientId =3;  //指令消息的来源。发送者的连接ID
  string toClientId = 4;  //指令消息的接收者。发送给对应的客户端连接ID
  bytes cmdData =5;  //对应指令的CmdData1的protobuf的message
  string msgId=6;
  int32 status=7;  //消息发送响应状态
  string callbackMsg=8; //消息发送响应内容
  string cmdkey=9;  //用于区分同一cmd多条指令的key 方便api调用针对同一指令不同回调的处理
  int32 priority=10; //用于处理指令队列的优先级的权重值
  int32 localId = 11; //客户端标识消息的id，主要区分相同cmd的不同消息，方便收到回复分发处理等效果
  string pageKey = 12; //用于页面发送指令和接收的指令相对应 如发送cmd2003和收到的cmd1000对应
  repeated string channel = 13; //指定需要广播的频道，可以指定一个或多个频道
  string pageId = 14;  //用于前端存储处理
  string msg =15; //一般用于json数据传递
  string Desc=16; //消息介绍内容，或其它数据
}*/


message SendMsg {
  int32 cmd =1;
  int64 timestamp  = 2; //消息发送时间
  string fromClientId =3;  //指令消息的来源。发送者的连接ID
  string toClientId = 4;  //指令消息的接收者。发送给对应的客户端连接ID
  bytes cmdData =5;  //对应指令的CmdData1的protobuf的message
  int32 status=6;  //消息发送响应状态
  int32 priority=7; //用于处理指令队列的优先级的权重值
  string localId = 8; //客户端标识消息的id，主要区分相同cmd的不同消息，方便收到回复分发处理等效果,考虑长度问题定义成string
  string serverId = 9; //服务端发送消息的ID,主要区分相同cmd的不同消息，方便服务端收到回复分发处理等效果,考虑长度问题定义成string
  repeated string channel = 10; //指定需要广播的频道，可以指定一个或多个频道
  string msg =11; //一般用于json数据传递，或消息发送响应内容
  string Desc=12; //消息介绍内容，或其它数据
}
